#!/bin/sh /etc/rc.common

NAME=ipsec
START=60
STOP=60

. $IPKG_INSTROOT/lib/functions.sh
. $IPKG_INSTROOT/lib/functions/service.sh

FileSecrets=/var/ipsec/ipsec.secrets
FileConn=/var/ipsec/ipsec.conf
FileCommon=/var/ipsec/strongswan.conf

FolderCerts=/var/ipsec/ipsec.d

ConfigUser()
{
  local enabled
  local xauth
  local name
  local password
  local crt_subject

  config_get_bool enabled $1 enabled 0
  [[ "$enabled" == "0" ]] && return

  config_get_bool xauth       $1 xauth       0
  config_get      name        $1 name        ""
  config_get      password    $1 password    ""

  if [ $xauth -eq 1 -a "$name" != "" -a "$password" != "" ]; then
    echo "$name : XAUTH \"$password\"" >> $FileSecrets
  fi
}


ConfigPhase1() {
  local encryption_algorithm1
  local hash_algorithm1
  local dh_group
  
  #configure in /etc/config/ipsec to modify cipher suite. 
  # Refer to cipher suite in strongswan Æ°ebsite 
  config_get encryption_algorithm1  "$1" encryption_algorithm1
  config_get hash_algorithm1        "$1" hash_algorithm1
  config_get dh_group              "$1" dh_group

  Phase1Proposal=${Phase1Proposal}","${encryption_algorithm1}-${hash_algorithm1}-${dh_group}
}

ConfigTunnel() {
  local local_subnet
  local local_nat
  local remote_subnet
  
  local pfs_group
  local encryption_algorithm2
  local authentication_algorithm2
  local 
  config_get local_subnet             "$1"           local_subnet
  config_get local_nat                "$1"           local_nat ""
  config_get remote_subnet            "$1"           remote_subnet
  #config_get phase2_proposal          "$1"           phase2_proposal
  #config_get pfs_group                "$p2_proposal" pfs_group
  #config_get encryption_algorithm2     "$p2_proposal" encryption_algorithm2
  #config_get authentication_algorithm2 "$p2_proposal" authentication_algorithm2
  
  [[ "$local_nat" != "" ]] && local_subnet=$local_nat

  p2_proposal="${encryption_algorithm2}-${authentication_algorithm2}-${pfs_group}"
  echo "# Configure general parameter" >> $FileConn
  echo "config setup" >> $FileConn
  echo "  charondebug = "all"" >> $FileConn
  echo "  uniqueids = yes" >> $FileConn
  echo "  strictcrlpolicy = no" >> $FileConn

  echo "# Configure connection" >> $FileConn
  echo "conn $ConfigName" >> $FileConn
  #echo "  keyexchange=ikev1" >> $FileConn
  if [ "$LocalGateway" != "" ]; then
  echo "  left=$LocalGateway" >> $FileConn
  fi
  if [ "$RemoteGateway" != "" ];then
  echo "  right=$RemoteGateway" >> $FileConn
  fi
  if [ "$LocalSubnet" != "" ];then
  echo "  leftsubnet=$LocalSubnet" >> $FileConn
  fi
  #Using mode psk
  if [ "$AuthenticationMethod" = "psk" ]; then
    echo "  leftauth=psk" >> $FileConn
    echo "  rightauth=psk" >> $FileConn
    echo "  rightsubnet=$RemoteSubnet" >> $FileConn
  # should be auto=route when going to 5.0.1
  # There are various options for auto: start,route
    echo "  auto=start" >> $FileConn
  # Using mode xauth_psk_server     
  elif [ "$AuthenticationMethod" = "xauth_psk_server" ]; then
    echo "  authby=xauthpsk" >> $FileConn
    echo "  xauth=server" >> $FileConn
    echo "  modeconfig=pull" >> $FileConn
    echo "  rightsourceip=$remote_subnet" >> $FileConn
    echo "  auto=add" >> $FileConn
  fi
  if [ "$AuthenticationMethod" = "eap-mschapv2" ]; then
    echo "  rightauth=eap-mschapv2" >> $FileConn
    echo "  leftcert=$Leftcert" >> $FileConn
    echo "  leftsendcert=$Leftsendcert" >> $FileConn
    echo "  rightsendcert=$Rightsendcert" >> $FileConn
    echo "  eap_identity=%identity" >> $FileConn
    echo "  auto=add" >> $FileConn
    echo "  rightdns=8.8.8.8,8.8.4.4" >> $FileConn
  elif [ "$AuthenticationMethod" = "pubkey" ]; then
    echo "  leftcert=$Leftcert" >> $FileConn
    echo "  leftsendcert=$Leftsendcert" >> $FileConn
    echo "  rightsendcert=$Rightsendcert" >> $FileConn
    echo "  leftauth=pubkey" >> $FileConn
    echo "  rightauth=pubkey" >> $FileConn
    echo "  rightca=$rightca" >> $FileConn
    echo "  auto=add" >> $FileConn
  fi
  if [ "$Keyingtries" != "" ]; then
  echo "  keyingtries=$Keyingtries" >> $FileConn
  fi
  if [ "$Ikelifetime" != "" ];then
  echo "  ikelifetime=$Ikelifetime" >> $FileConn
  fi
  if [ "$Lifetime" != "" ]; then
  echo "  lifetime=$Lifetime" >> $FileConn
  fi
  if [ "$Dpdaction" != "" ];then
  echo "  dpdaction=$Dpdaction" >> $FileConn
  fi
  if [ "$Dpdtimeout" != "" ]; then
  echo "  dpdtimeout=$Dpdtimeout" >> $FileConn
  fi
  if [ "$Dpddelay" != "" ];then
  echo "  dpddelay=$Dpddelay" >> $FileConn
  fi
  if [ "$LocalIdentifier" != "" ]; then
    echo "  leftid=$LocalIdentifier" >> $FileConn
  fi
  if [ "$RemoteIdentifier" != "" ]; then
    echo "  rightid=$RemoteIdentifier" >> $FileConn
  fi
  if [ "$forceencaps" != "" ]; then
    echo "  forceencaps=$forceencaps" >> $FileConn
  fi
  if [ "$Fragmentation" != "" ]; then
    echo "  fragmentation=$Fragmentation" >> $FileConn
  fi
  if [ "$rekey" != "" ]; then
    echo "  rekey=$rekey" >> $FileConn
  fi
  if [ "$compress" != "" ]; then
    echo "  compress=$compress" >> $FileConn
  fi
  if [ "$rightsourceip" != "" ]; then
    echo "  rightsourceip=$rightsourceip" >> $FileConn
  fi

#  echo "  auth=esp" >> $FileConn
  echo "  esp=$Phase2_proposal" >> $FileConn
  echo "  ike=$Phase1_proposal" >> $FileConn
  echo "  type=tunnel" >> $FileConn
}

ConfigRemote1() {
  local enabled
  local remotegateway
  local remotegateway
  local local_subnet
  local remote_subnet
  local pre_shared_key
  local authentication_method
  local local_identifier
  local remote_identifier
  local keyingtries
  local ikelifetime
  local lifetime
  local dpddelay
  local dpdtimeout
  local dpdaction
  local phase2_proposal
  local phase1_proposal
  local fragmentation
  local forceencaps
  local leftcert
  local leftsendcert
  local rightsendcert
  local rekey
  local rightca
  local compress
  local rightsourceip
  local username1
  local username2
  local password1
  local password2
  local leftkey
  ConfigName=$1

  config_get_bool enabled "$1" enabled 0
  [[ "$enabled" == "0" ]] && return

  config_get remotegateway         "$1" remotegateway
  config_get localgateway          "$1" localgateway
  config_get remote_subnet         "$1" remote_subnet
  config_get local_subnet          "$1" local_subnet
  config_get pre_shared_key        "$1" pre_shared_key
  config_get authentication_method "$1" authentication_method
  config_get local_identifier      "$1" local_identifier
  config_get remote_identifier     "$1" remote_identifier
  config_get keyingtries           "$1" keyingtries
  config_get ikelifetime           "$1" ikelifetime
  config_get lifetime              "$1" lifetime
  config_get dpddelay              "$1" dpddelay
  config_get dpdtimeout            "$1" dpdtimeout
  config_get dpdaction             "$1" dpdaction
  config_get phase2_proposal       "$1" phase2_proposal 
  config_get phase1_proposal       "$1" phase1_proposal
  config_get fragmentation         "$1" fragmentation
  config_get forceencaps           "$1" forceencaps
  config_get leftcert              "$1" leftcert
  config_get leftsendcert          "$1" leftsendcert
  config_get rightsendcert         "$1" rightsendcert
  config_get rekey                 "$1" rekey
  config_get rightca               "$1" rightca
  config_get compress              "$1" compress
  config_get rightsourceip         "$1" rightsourceip
  config_get username1             "$1" username1
  config_get username2             "$1" username2
  config_get password1             "$1" password1
  config_get password2             "$1" password2
  config_get leftkey               "$1" leftkey
  AuthenticationMethod=$authentication_method
  LocalIdentifier=$local_identifier
  RemoteIdentifier=$remote_identifier
  Keyingtries=$keyingtries
  Ikelifetime=$ikelifetime
  Lifetime=$lifetime
  Dpddelay=$dpddelay
  Dpdtimeout=$dpdtimeout
  Dpdaction=$dpdaction
  RemoteGateway=$remotegateway
  LocalSubnet=$local_subnet
  RemoteSubnet=$remote_subnet
  Phase1_proposal=$phase1_proposal
  Phase2_proposal=$phase2_proposal
  Fragmentation=$fragmentation
  Compress=$compress
  Rightsourceip=$rightsorceip
  Rightca=$rightca
  Rekey=$rekey
  Rightsendcert=$rightsendcert
  Leftsendcert=$leftsendcert
  Leftcert=$leftcert
  

  if [ "$RemoteGateway" = "any" ]; then
    RemoteGateway="%any"
    #LocalGateway=`ip route get 1.1.1.1 | awk -F"src" '/src/{gsub(/ /,"");print $2}'`
    LocalGateway=$localgateway
  else
    #LocalGateway=`ip route get $RemoteGateway | awk -F"src" '/src/{gsub(/ /,"");print $2}'`
    LocalGateway=$localgateway
  fi
  if [ "$AuthenticationMethod" = "psk" ]; then
    echo "$LocalGateway $RemoteGateway : PSK \"$pre_shared_key\"" >> $FileSecrets
  elif [ "$authentication_method" = "eap-mschapv2" ]; then
    echo "$local_identifier : RSA \"$leftkey\"" >> $FileSecrets
    echo "$username1 %any% : EAP \"$password1\"" >> $FileSecrets
    echo "$username2 %any% : EAP \"$password2\"" >> $FileSecrets
  fi
  Phase1Proposal=""
  config_list_foreach "$1" p1_proposal ConfigPhase1
  Phase1Proposal=`echo $Phase1Proposal | cut -b 2-`

  config_list_foreach "$1" tunnel ConfigTunnel
}

# Prepare for enviroment create and override config file
PrepareEnvironment() {
  local debug

  for d in cacerts aacerts ocspcerts crls acerts certs private; do
    mkdir -p $FolderCerts/$d 2>/dev/null
  done

  if [ ! -L /etc/ipsec.d ]; then
    rm -rf /etc/ipsec.d 2>/dev/null
    ln -s $FolderCerts /etc/ipsec.d
  fi

  if [ ! -L /etc/ipsec.secrets ]; then
    rm /etc/ipsec.secrets 2>/dev/null
    ln -s $FileSecrets /etc/ipsec.secrets
  fi

  if [ ! -L /etc/strongswan.conf ]; then
    rm /etc/strongswan.conf 2>/dev/null
    ln -s $FileCommon /etc/strongswan.conf
  fi

  if [ ! -L /etc/ipsec.conf ]; then
    rm /etc/ipsec.conf 2>/dev/null
    ln -s $FileConn /etc/ipsec.conf
  fi

  echo "# generated by /etc/init.d/ipsec" > $FileConn
  #echo "# version 2" > $FileConn
  echo "# generated by /etc/init.d/ipsec" > $FileSecrets

  config_get debug "$1" debug 0

  echo "# generated by /etc/init.d/ipsec" > $FileCommon
  echo "charon {" >> $FileCommon
  echo "      load = aes des sha1 sha2 eap-mschapv2 openssl md5 pem pkcs1 gmp random nonce x509 revocation hmac stroke kernel-netlink socket-default updown attr farp dhcp " >> $FileCommon
  #echo "       load_modular = yes" >> $FileCommon
  #echo "load = all" >> $FileCommon
  echo "       plugin {" >> $FileCommon
  echo "              include strongswan.d/charon/*.conf" >> $FileCommon
  echo "}" >> $FileCommon
 
  #echo "  filelog {" >> $FileCommon
  #echo "    /var/log/charon.log {" >> $FileCommon
  #echo "      time_format = %b %e %T" >> $FileCommon
  #echo "      ike_name = yes" >> $FileCommon
  #echo "      append = no" >> $FileCommon
  #echo "      default = " $debug >> $FileCommon
  #echo "      flush_line = yes" >> $FileCommon
  #echo "    }" >> $FileCommon
  #echo "  }" >> $FileCommon
  echo "}" >> $FileCommon
  echo "include strongswan.d/charon/*.conf" >> $FileCommon

}

ConfigRemote2() {
  local enabled
  local remotegateway
  local remotegateway
  local local_subnet
  local remote_subnet
  local pre_shared_key
  local authentication_method
  local local_identifier
  local remote_identifier
  local keyingtries
  local ikelifetime
  local lifetime
  local dpddelay
  local dpdtimeout
  local dpdaction
  local phase2_proposal
  local phase1_proposal
  local fragmentation
  local forceencaps
  local leftcert
  local leftsendcert
  local rightsendcert
  local rekey
  local rightca
  local compress
  local rightsourceip
  local username1
  local username2
  local password1
  local password2
  local leftkey
  ConfigName=$1

  config_get_bool enabled "$1" enabled 0
  [[ "$enabled" == "0" ]] && return

  config_get remotegateway         "$1" remotegateway
  config_get localgateway          "$1" localgateway
  config_get remote_subnet         "$1" remote_subnet
  config_get local_subnet          "$1" local_subnet
  config_get pre_shared_key        "$1" pre_shared_key
  config_get authentication_method "$1" authentication_method
  config_get local_identifier      "$1" local_identifier
  config_get remote_identifier     "$1" remote_identifier
  config_get keyingtries           "$1" keyingtries
  config_get ikelifetime           "$1" ikelifetime
  config_get lifetime              "$1" lifetime
  config_get dpddelay              "$1" dpddelay
  config_get dpdtimeout            "$1" dpdtimeout
  config_get dpdaction             "$1" dpdaction
  config_get phase2_proposal       "$1" phase2_proposal 
  config_get phase1_proposal       "$1" phase1_proposal
  config_get fragmentation         "$1" fragmentation
  config_get forceencaps           "$1" forceencaps
  config_get leftcert              "$1" leftcert
  config_get leftsendcert          "$1" leftsendcert
  config_get rightsendcert         "$1" rightsendcert
  config_get rekey                 "$1" rekey
  config_get rightca               "$1" rightca
  config_get compress              "$1" compress
  config_get rightsourceip         "$1" rightsourceip
  config_get username1             "$1" username1
  config_get username2             "$1" username2
  config_get password1             "$1" password1
  config_get password2             "$1" password2
  config_get leftkey               "$1" leftkey
  AuthenticationMethod=$authentication_method
  LocalIdentifier=$local_identifier
  RemoteIdentifier=$remote_identifier
  Keyingtries=$keyingtries
  Ikelifetime=$ikelifetime
  Lifetime=$lifetime
  Dpddelay=$dpddelay
  Dpdtimeout=$dpdtimeout
  Dpdaction=$dpdaction
  RemoteGateway=$remotegateway
  LocalSubnet=$local_subnet
  RemoteSubnet=$remote_subnet
  Phase1_proposal=$phase1_proposal
  Phase2_proposal=$phase2_proposal
  Fragmentation=$fragmentation
  Compress=$compress
  Rightsourceip=$rightsorceip
  Rightca=$rightca
  Rekey=$rekey
  Rightsendcert=$rightsendcert
  Leftsendcert=$leftsendcert
  Leftcert=$leftcert
  

  if [ "$RemoteGateway" = "any" ]; then
    RemoteGateway="%any"
    #LocalGateway=`ip route get 1.1.1.1 | awk -F"src" '/src/{gsub(/ /,"");print $2}'`
    LocalGateway=$localgateway
  else
    #LocalGateway=`ip route get $RemoteGateway | awk -F"src" '/src/{gsub(/ /,"");print $2}'`
    LocalGateway=$localgateway
  fi
  if [ "$AuthenticationMethod" = "psk" ]; then
    echo "$LocalGateway $RemoteGateway : PSK \"$pre_shared_key\"" >> $FileSecrets
  elif [ "$authentication_method" = "eap-mschapv2" ]; then
    echo "$local_identifier : RSA \"$leftkey\"" >> $FileSecrets
    echo "$username1 %any% : EAP \"$password1\"" >> $FileSecrets
    echo "$username2 %any% : EAP \"$password2\"" >> $FileSecrets
  fi
  Phase1Proposal=""
  config_list_foreach "$1" p1_proposal ConfigPhase1
  Phase1Proposal=`echo $Phase1Proposal | cut -b 2-`

  config_list_foreach "$1" tunnel ConfigTunnel
}

# Prepare for enviroment create and override config file
PrepareEnvironment() {
  local debug

  for d in cacerts aacerts ocspcerts crls acerts certs private; do
    mkdir -p $FolderCerts/$d 2>/dev/null
  done

  if [ ! -L /etc/ipsec.d ]; then
    rm -rf /etc/ipsec.d 2>/dev/null
    ln -s $FolderCerts /etc/ipsec.d
  fi

  if [ ! -L /etc/ipsec.secrets ]; then
    rm /etc/ipsec.secrets 2>/dev/null
    ln -s $FileSecrets /etc/ipsec.secrets
  fi

  if [ ! -L /etc/strongswan.conf ]; then
    rm /etc/strongswan.conf 2>/dev/null
    ln -s $FileCommon /etc/strongswan.conf
  fi

  if [ ! -L /etc/ipsec.conf ]; then
    rm /etc/ipsec.conf 2>/dev/null
    ln -s $FileConn /etc/ipsec.conf
  fi

  echo "# generated by /etc/init.d/ipsec" > $FileConn
  #echo "# version 2" > $FileConn
  echo "# generated by /etc/init.d/ipsec" > $FileSecrets

  config_get debug "$1" debug 0

  echo "# generated by /etc/init.d/ipsec" > $FileCommon
  echo "charon {" >> $FileCommon
  echo "      load = aes des sha1 sha2 eap-mschapv2 openssl md5 pem pkcs1 gmp random nonce x509 revocation hmac stroke kernel-netlink socket-default updown attr farp dhcp " >> $FileCommon
  #echo "       load_modular = yes" >> $FileCommon
  #echo "load = all" >> $FileCommon
  echo "       plugin {" >> $FileCommon
  echo "              include strongswan.d/charon/*.conf" >> $FileCommon
  echo "}" >> $FileCommon
 
  #echo "  filelog {" >> $FileCommon
  #echo "    /var/log/charon.log {" >> $FileCommon
  #echo "      time_format = %b %e %T" >> $FileCommon
  #echo "      ike_name = yes" >> $FileCommon
  #echo "      append = no" >> $FileCommon
  #echo "      default = " $debug >> $FileCommon
  #echo "      flush_line = yes" >> $FileCommon
  #echo "    }" >> $FileCommon
  #echo "  }" >> $FileCommon
  echo "}" >> $FileCommon
  echo "include strongswan.d/charon/*.conf" >> $FileCommon

}

CheckInstallation() {
#   if [ ! -x /usr/sbin/ip ]; then
#     echo /usr/sbin/ip missing
#     echo install with \"opkg install ip\"
#     exit
#   fi

  for f in authenc cbc hmac md5 sha1; do
    if [ `opkg list kmod-crypto-$f | wc -l` -eq 0 ]; then
      echo kmod-crypto-$f missing
      echo install with  \"opkg install kmod-crypto-$f --nodeps\"
      exit
    fi
  done

  for f in aes gmp hmac kernel-netlink md5 random sha1 updown attr resolve; do
    if [ ! -f /usr/lib/ipsec/plugins/libstrongswan-${f}.so ]; then
      echo /usr/lib/ipsec/plugins/$f missing
      echo install with \"opkg install strongswan-mod-$f --nodeps\"
      exit
    fi
  done
}
# Start strongswan commd using ipsec stroke
start() {
  CheckInstallation

  config_load ipsec
  config_foreach PrepareEnvironment ipsec
  config_foreach ConfigRemote1 site2site
  config_foreach ConfigRemote2 client2server

  config_load users
  config_foreach ConfigUser user

  /usr/sbin/ipsec start
}
# Stop strongswan commd using ipsec stroke
stop() {
  /usr/sbin/ipsec stop
}
# restart strongswan commd using ipsec stroke
restart()
{
  /usr/sbin/ipsec stop
  CheckInstallation

  config_load ipsec
  config_foreach PrepareEnvironment ipsec
  config_foreach ConfigRemote1 site2site
  config_foreach ConfigRemote2 client2server

  config_load users
  config_foreach ConfigUser user

  /usr/sbin/ipsec start
}

